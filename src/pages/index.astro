---
import Layout from "../layouts/Layout.astro";
import Logo from "../components/Logo.astro";
import ShoreleftSVG from "../components/ShoreLeftSVG.astro";
import CloudsSVG from "../components/CloudsSVG.astro";
import BirdSVG from "../components/BirdSVG.astro";
---

<Layout title="Oktoberfest Geelong">
  <div class="bg" aria-hidden="true">
    <div class="darkness-overlay"></div>
    <div class="sky">
      <div class="clouds">
        <CloudsSVG />
      </div>
      <div class="bird">
        <BirdSVG />
      </div>
      <div class="gradient-overlay"></div>
    </div>
    <div class="ground">
      <div class="overlay"></div>
      <img src="statues-shadows.svg" class="statues-shadows" />
      <img src="statues.svg" class="statues" />
      <div class="water">
        <div class="waves"></div>
      </div>
      <img src="jetty.svg" class="jetty" />
      <img src="boat.svg" class="boat" />
      <div class="shore-l">
        <ShoreleftSVG />
      </div>
      <div class="sand"></div>
    </div>
  </div>
  <header>
    <div class="logo">
      <a href="/" title="Oktoberfest Geelong Homepage">
        <Logo />
      </a>
    </div>
  </header>

  <main id="main">
    <section class="content hero">
      <h2>
        <span>Beer,</span>
        <span>Bratwurst,</span>
        <span>Beach.</span>
      </h2>
      <div class="details">
        <a class="btn tickets" href="#">Get tickets</a>
        <span>
          <h3>Saturday October 4</h3>
          <h4>Cunningham Pier, Geelong Waterfront</h4>
        </span>
      </div>
    </section>
    <!-- <section id="whats-on" class="content date scroll-trigger" tabindex="0">
      <h2>Saturday October 4</h2>
      <h4>Cunningham Pier, Geelong Waterfront</h4>
    </section> -->
    <div class="time-cards-wrapper">
      <section class="content time-card scroll-trigger" tabindex="0">
        <h2>10am</h2>
        <h3>Brezeln for breakfast</h3>
        <p>Enjoy food stalls, rides and entertainment on Cunningham Pier</p>
      </section>
      <section class="content time-card scroll-trigger" tabindex="0">
        <h2>12pm</h2>
        <h3>Fr√ºhschoppen by the bay</h3>
        <p>
          From Amber Ale to Weizenbock, you will find a huge variety of beer in
          the 3 Bierhalles.
        </p>
      </section>
      <section class="content time-card scroll-trigger" tabindex="0">
        <h2>3pm</h2>
        <h3>Schuhplattler on the pier</h3>
        <p>
          Live performances on the main stage, featuring traditional folk
          dancing and music.
        </p>
      </section>
      <section class="content time-card scroll-trigger" tabindex="0">
        <h2>7pm</h2>
        <h3>Abendessen</h3>
        <p>
          Explore food stalls along the waterfront, or sit for a traditional
          Oktoberfest meal at one of the 3 Bierhalles.
        </p>
      </section>
    </div>
  </main>

  <script>
    import { gsap } from "gsap";
    import { ScrollTrigger } from "gsap/ScrollTrigger";
    import { ScrollToPlugin } from "gsap/ScrollToPlugin";

    const content = document.querySelectorAll(".scroll-trigger");
    const hero = document.querySelectorAll(".hero");
    const heroSpans = document.querySelectorAll(".hero > h2 > span");
    const ground = document.querySelector(".ground");
    const darknessOverlay = document.querySelector(".darkness-overlay");
    const clouds = document.querySelector(".clouds");
    const waves = document.querySelector(".waves");
    const boat = document.querySelector(".boat");
    const bird = document.querySelector(".bird");
    const gradientOverlay = document.querySelector(".gradient-overlay");
    const statues = document.querySelector(".statues");
    const statuesShadows = document.querySelector(".statues-shadows");

    gsap.registerPlugin(ScrollTrigger, ScrollToPlugin);

    // Waves
    gsap.to(waves, {
      x: "-10%",
      duration: 60,
      repeat: -1,
      yoyo: true,
      ease: "linear",
    });

    // Boat
    let boattl = gsap.timeline({ repeat: -1, paused: false, yoyo: true });
    boattl
      .to(boat, { x: "-20vw", duration: 120, ease: "linear" }, "boating")
      .to(
        boat,
        {
          y: "-2",
          duration: 2,
          ease: "power1.inOut",
          repeat: -1,
          yoyo: true,
        },
        "boating"
      );

    // Bird
    let birdtl = gsap.timeline({ repeat: -1, paused: false });
    birdtl.fromTo(
      bird,
      { x: "-80px" },
      { x: "100vw", duration: 60, repeat: -1, yoyo: false },
      "flying"
    );
    birdtl.fromTo(
      bird,
      { y: "-40px" },
      {
        y: "40px",
        duration: 30,
        yoyo: true,
        repeat: -1,
        ease: "power1.inOut",
      },
      "flying"
    );

    // Pan down (plays immediately after load)
    let hptl = gsap.timeline({ repeat: 0, paused: true });
    let groundHeight = ground?.clientHeight ? ground?.clientHeight - 50 : 250;
    hptl.fromTo(
      clouds,
      { y: 50 },
      { y: 0, duration: 2, delay: 1.5, ease: "power1" },
      "intro"
    );
    hptl.from(
      ground,
      { y: groundHeight, duration: 2, delay: 1.75, ease: "power1" },
      "intro"
    );
    hptl.from(
      statues,
      { y: 120, duration: 2, delay: 1.5, ease: "power1" },
      "intro"
    );
    hptl.from(
      "#main",
      { opacity: 0, duration: 0.1, ease: "power1" },
      "content"
    );
    heroSpans.forEach((span, i) => {
      hptl.from(
        span,
        {
          opacity: 0,
          scale: 1.1,
          duration: 0.25,
          delay: i * 0.5,
          ease: "power1",
        },
        "contentShow"
      );
    });
    hptl.from(
      ".hero > div",
      {
        opacity: 0,
        duration: 0.25,
        delay: 0.25,
        ease: "power1",
      },
      "contentAfter"
    );
    // hptl.from(hero, { opacity: 0, duration: 0.66, ease: "power1" }, "content");
    // Start the timeline
    hptl.play();
    gsap.to(hero, {
      opacity: 0,
      filter: "blur(5px)",
      ease: "power1",
      scrollTrigger: {
        trigger: hero,
        scrub: 0.5,
        start: "top top",
        end: "bottom center",
      },
    });
    // Statue shadows
    gsap.to(statuesShadows, {
      skewX: "-90deg",
      ease: "none",
      scrollTrigger: {
        trigger: "body",
        scrub: 0.5,
      },
    });

    // Darkness & gradient overlay
    // let darknessTl = gsap.timeline({
    //   scrollTrigger: {
    //     trigger: "body",
    //     start: "80% bottom",
    //     end: "100% bottom",
    //     scrub: 0.5,
    //   },
    // });

    // darknessTl
    //   .to(
    //     darknessOverlay,
    //     { opacity: 0.3, ease: "linear", duration: 2 },
    //     "night"
    //   )
    //   .to(clouds, { filter: "blur(3px)", opacity: 0.3 }, "night")
    //   .to(
    //     gradientOverlay,
    //     { opacity: 0.8, ease: "linear", duration: 2 },
    //     "night"
    //   );

    // Content sections
    content.forEach((item, i) => {
      let isSecondLastItem = i === content.length - 2;
      let isLastItem = i === content.length - 1;
      let h3 = item.querySelector("h3");
      const startPoint = "top center";
      const endPoint = isLastItem ? "center center" : "bottom center";
      const tl = gsap.timeline({
        scrollTrigger: {
          trigger: item,
          start: startPoint,
          end: endPoint,
          fastScrollEnd: 1000,
          scrub: 0.5,
          pin: false,
          markers: false,
          snap: {
            snapTo: "labels",
            directional: true,
            duration: { min: 0.1, max: 0.5 },
            delay: 0,
            ease: "power1.inOut",
          },
        },
      });

      if (isLastItem) {
        tl.to(
          darknessOverlay,
          { opacity: 0.3, ease: "linear", duration: 2 },
          "entry"
        )
          .to(clouds, { filter: "blur(3px)", opacity: 0.3 }, "entry")
          .to(
            gradientOverlay,
            { opacity: 0.8, ease: "linear", duration: 2 },
            "entry"
          )
          .from(item, { opacity: 0, duration: 0.5, ease: "power1.in" }, "entry")
          .from(h3, { opacity: 0, x: 20, duration: 0.5 }, "entry")
          .addLabel("entry");
      } else if (isSecondLastItem) {
        tl.to(
          darknessOverlay,
          { opacity: 0.05, ease: "linear", duration: 0.5 },
          "entry"
        )
          .to(clouds, { filter: "blur(1px)", opacity: 0.5 }, "entry")
          .to(
            gradientOverlay,
            { opacity: 0.3, ease: "linear", duration: 0.5 },
            "entry"
          )
          .from(item, { opacity: 0, duration: 0.5, ease: "power1.in" }, "entry")
          .from(h3, { opacity: 0, x: 20, duration: 0.5 }, "entry")
          .addLabel("entry")
          .to(item, { opacity: 0, duration: 0.25, ease: "power1.Out" });
      } else {
        tl.from(item, { opacity: 0, duration: 0.5, ease: "power1.in" }, "entry")
          .from(h3, { opacity: 0, x: 20, duration: 0.5 }, "entry")
          .addLabel("entry")
          .to(item, { opacity: 0, duration: 0.25, ease: "power1.Out" });
      }
      // Make sure focused element gets snapped to
      item.addEventListener("focus", () => {
        gsap.to(window, {
          scrollTo: tl.scrollTrigger?.labelToScroll("entry"),
        });
      });
    });
  </script>
  <style>
    :root {
      --groundHeight: 220px;
      --contentAreaHeight: calc(100vh - var(--groundHeight));
    }
    @media (min-width: 750px) and (min-height: 700px) {
      :root {
        --groundHeight: 250px;
      }
    }
    @media (min-width: 900px) and (min-height: 900px) {
      :root {
        --groundHeight: 300px;
      }
    }
    main {
      padding: 2rem 2rem var(--groundHeight) 2rem;
      position: relative;
      z-index: 11;
      display: grid;
      grid-template-columns: 1fr auto 1fr;
    }
    header {
      position: fixed;
      display: grid;
      grid-template-columns: 1fr 350px 1fr;
      justify-items: center;
      z-index: 12;
      width: 100%;
    }
    .logo {
      grid-column: 2;
      width: 200px;
      margin-top: 2rem;
      @media (min-width: 750px) {
        width: 250px;
      }
    }

    .content {
      position: relative;
      display: grid;
      gap: 2rem;
      z-index: 11;
      color: #fff;

      & h2 {
        font-size: 3rem;
        line-height: 1.125;
        margin: 0;
        color: var(--brightblue);
      }
      & h3 {
        font-weight: 700;
        line-height: 1.25;
        margin: 0;
        font-size: 2rem;
        /* color: var(--brightblue); */
      }
      & h4,
      h5 {
        font-family: "Source Sans 3";
        font-weight: 500;
        font-size: 1.25rem;
        line-height: 1.33;
        margin: 0;
      }
      @media (min-width: 600px) {
        & h2 {
          font-size: 3.5rem;
        }
        & h3 {
          font-size: 2.5rem;
        }
        & p {
          font-size: 1.25rem;
        }
      }

      &:last-child {
        margin-bottom: 25%;
      }
    }
    .time-cards-wrapper {
      margin-top: var(--contentAreaHeight);
      display: grid;
      grid-template-columns: subgrid;
      grid-column: 1 / -1;
      justify-items: center;
    }
    .time-card {
      grid-template-columns: min-content minmax(min-content, 14em);
      grid-column: 2 / 3;
      align-content: center;
      padding: 4rem 2rem;
      &:nth-last-child(2) {
        & h2 {
          color: color-mix(in oklab, var(--red), #fff 10%);
        }
        & h3 {
          color: color-mix(in oklab, var(--brightblue), #000 20%);
        }
      }
      &:last-child {
        color: var(--sand);
        & h2 {
          color: color-mix(in oklab, var(--red), #fff 30%);
        }
        & h3 {
          color: color-mix(in oklab, var(--brightblue), #fff 30%);
        }

        & p {
          color: var(--sand);
        }
      }
      & > * {
        grid-column: 1 / 3;
      }
      & h2 {
        grid-column: 1;
        grid-row: 1;
        align-self: center;
        color: var(--red);
      }
      & h3 {
        grid-column: 2;
        grid-row: 2 / -1;
        align-self: center;
        color: var(--brightblue);
      }
      & p {
        text-align: center;
        margin: 0;
        grid-column: 1 / 3;
        color: #231f20;
        /* border-top: 2px solid rgba(0, 0, 0, 0.05); */
        border-top: 2px dotted rgba(255, 255, 255, 0.33);
        padding: 2rem 0 0 0;
      }
    }
    .hero.content {
      position: fixed;
      inset: 0;
      padding: 0 2rem;
      height: calc(var(--contentAreaHeight) - 2rem);
      grid-template-columns: min-content 1fr;
      grid-template-rows: 150px auto auto;
      grid-column: 1 / -1;
      gap: 1rem;
      align-items: end;
      @media (min-width: 750px) {
        grid-template-rows: 180px auto;
        grid-template-columns: min-content 1fr 260px;
      }
      @media (min-width: 900px) {
        padding: 0 4rem;
        grid-template-columns: min-content 1fr 300px;
      }
      & h2 {
        grid-column: 1;
        grid-row: 2;
        font-size: 4rem;
        line-height: 1.1;
        & span {
          display: inline-block;
        }
        @media (min-width: 900px) and (min-height: 700px) {
          font-size: 5rem;
          line-height: 1;
        }
        @media (min-width: 1280px) and (min-height: 900px) {
          font-size: 6rem;
        }
      }

      .details {
        display: flex;
        flex-wrap: wrap-reverse;
        align-self: start;
        gap: 1rem;
        grid-column: 1 / -1;
        grid-row: 3;
        text-shadow: 0em 0em 0.5em rgba(0, 0, 0, 0.1);
        @media (min-width: 750px) {
          grid-column: 3;
          grid-row: 2;
          text-align: right;
          justify-content: end;
          align-self: end;
          gap: 2rem;
        }
        & h3 {
          font-family: "Source Sans 3";
          font-size: 1.25rem;
          font-weight: 600;
          font-family: var(--);
        }
        & h4 {
          font-size: 1rem;
          font-weight: 400;
        }
      }
      & a {
        align-self: center;
        text-decoration: none;
        font-weight: 700;
        font-size: 1.25rem;
        letter-spacing: 0.025em;
        color: #fff;
        padding: 0.5rem 2rem;
        background: var(--red);
        border-radius: 0.25em;
      }
    }
    .date {
      text-align: center;
      & h2,
      h3,
      h4,
      h5 {
        font-family: "Source Sans 3";
      }
    }
    .bg {
      position: fixed;
      z-index: 1;
      display: grid;
      grid-template-rows: 1fr var(--groundHeight);
      height: 100lvh;
      width: 100%;
      background: var(--sky) url(/texture.png);
      background-blend-mode: overlay;
    }
    .overlay {
      position: absolute;
      inset: 0;
      background: url(/texture.png);
      height: 100%;
      z-index: 10;
    }
    .gradient-overlay {
      background-image: url(/texture-i.png),
        linear-gradient(
          180deg in oklab,
          oklch(19.84% 0.0911 281.68) 10% 10%,
          oklch(49% 0.1 232) 50%,
          oklch(81% 0.31 39) 85% 85%
        );
      background-blend-mode: overlay;
      opacity: 0;
      position: absolute;
      inset: 0;
      height: 100%;
    }
    .darkness-overlay {
      background: oklch(20.3% 0.0837 32.82);
      mix-blend-mode: overlay;
      grid-column: 1 / -1;
      grid-row: 1 / -1;
      opacity: 0;
      /* position: absolute; */
      /* inset: 0; */
      /* height: 100%; */
      z-index: 10;
    }
    .sky {
      grid-column: 1 / 1;
      grid-row: 1;
      display: grid;
      grid-template-columns: 1fr 350px 1fr;
      grid-template-rows: min-content min-content 1fr;
      justify-items: center;
    }
    .clouds {
      grid-column: 1 / -1;
      grid-row: 3;
      align-self: center;
      width: 90%;
      padding: 2rem;
      z-index: 11;
      mix-blend-mode: overlay;
    }
    .bird {
      grid-column: 1;
      grid-row: 3;
      width: 20px;
      align-self: center;
      justify-self: start;
      z-index: 11;
    }
    .ground {
      grid-column: 1 / -1;
      grid-row: 2 / -1;
      display: grid;
      grid-template-rows: 15% 35% 50%;
      grid-template-columns: 1fr auto 1fr;

      /* justify-content: center; */
    }
    .water {
      grid-column: 1 / -1;
      grid-row: 2 / 4;
      background: var(--water) url(/texture-i.png);
      background-blend-mode: overlay;
    }
    .boat {
      width: 40px;
      margin-top: -20px;
      grid-column: 3;
      grid-row: 2;
      align-self: start;
      justify-self: center;
      z-index: 5;
    }
    .waves {
      height: 5px;
      margin-top: -5px;
      width: 200%;
      background-image: url(/waves.svg);
      background-repeat: repeat-x;
    }
    .sand {
      position: relative;
      background: var(--sand) url(/texture.png);
      background-blend-mode: overlay;
      display: grid;
      grid-template-columns: 1fr 1fr 1fr;
      grid-column: 1 / -1;
      grid-row: 3 / 4;
    }
    .statues,
    .statues-shadows {
      grid-column: 2;
      grid-row: 1 / span all;
      align-self: center;
      min-width: var(--groundHeight);
      z-index: 11;
      margin-bottom: 2rem;
    }
    .statues {
    }
    .statues-shadows {
      opacity: 0.2;
      transform: skewX(90deg) scaleY(0.4);
      transform-origin: bottom center;
    }
    .shore-l {
      grid-row: 1 / 3;
      grid-column: 1 / -1;
      height: 101%;
      z-index: 5;
    }
    .jetty {
      grid-row: 1 / 3;
      grid-column: 2 / -1;
      align-self: end;
      justify-self: end;
      max-width: 200px;
      margin: 0 -20% 1rem 0;
      z-index: 10;
    }

    @media (min-width: 700px) and (min-height: 700px) {
      .statues,
      .statues-shadows {
        /* min-width: var(--groundHeight); */
      }
      .jetty {
        max-width: 240px;
        margin: 0 0 1rem 0;
      }
    }
  </style>
</Layout>
